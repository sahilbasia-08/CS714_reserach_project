{"ast":null,"code":"var _jsxFileName = \"/home/rubbish/secure_messaging_platform/client/src/components/Chat/Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport queryString from \"query-string\";\nimport io from \"socket.io-client\";\nimport Messages from \"../Messages/Messages\";\nimport InfoBar from \"../InfoBar/InfoBar\";\nimport Input from \"../Input/Input\";\nimport \"./Chat.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Chat() {\n  _s();\n  const location = useLocation();\n  const socketRef = useRef(null);\n  const [user_name, set_user_name] = useState(\"\");\n  const [user_room, set_user_room] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n\n  // use an explicit URL with protocol to avoid env/WS quirks\n  const ENDPOINT = process.env.REACT_APP_ENDPOINT || \"http://localhost:5001\";\n\n  // (future sealed-sender) room public key, fetched from server\n  const [roomPubKey, setRoomPubKey] = useState(null); // Uint8Array or base64 string as you prefer\n\n  // connect & join once per room change\n  useEffect(() => {\n    const {\n      user_name: qName,\n      user_room: qRoom\n    } = queryString.parse(location.search);\n    if (!qName || !qRoom) return;\n    set_user_name(String(qName));\n    set_user_room(String(qRoom));\n\n    // establish a fresh socket (and clean up old one if present)\n    if (socketRef.current) {\n      try {\n        socketRef.current.disconnect();\n      } catch {}\n    }\n    const socket = io(ENDPOINT, {\n      transports: [\"websocket\", \"polling\"],\n      withCredentials: true\n    });\n    socketRef.current = socket;\n    socket.emit(\"join\", {\n      user_name: String(qName),\n      user_room: String(qRoom)\n    });\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.off();\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.search]);\n\n  // message stream\n  useEffect(() => {\n    const socket = socketRef.current;\n    if (!socket) return;\n    const onMessage = msg => {\n      // keeps compatibility with your current message shape\n      setMessages(prev => [...prev, msg]);\n    };\n    socket.on(\"message\", onMessage);\n    return () => {\n      socket.off(\"message\", onMessage);\n    };\n  }, [socketRef]);\n\n  // edited message stream\n  useEffect(() => {\n    const socket = socketRef.current;\n    if (!socket) return;\n    const onEdited = editedMessage => {\n      const {\n        originalMessage,\n        editedMessageText\n      } = editedMessage;\n      setMessages(prev => prev.map(m => m.message_id === originalMessage.message_id ? {\n        ...m,\n        message_text: editedMessageText\n      } : m));\n    };\n    socket.on(\"editedMessage\", onEdited);\n    return () => {\n      socket.off(\"editedMessage\", onEdited);\n    };\n  }, [socketRef]);\n\n  // fetch room public key for sealed-sender (kept optional; plaintext still works)\n  useEffect(() => {\n    if (!user_room) return;\n    const url = `${ENDPOINT}/roomPubKey?room=${encodeURIComponent(user_room)}`;\n    fetch(url).then(r => r.ok ? r.json() : Promise.reject()).then(({\n      pubkey_b64\n    }) => setRoomPubKey(pubkey_b64 || null)).catch(() => {\n      // if your backend doesn’t expose this yet, we simply skip it\n      setRoomPubKey(null);\n    });\n  }, [user_room, ENDPOINT]);\n  function editMessage(originalMessage, editedMessageText) {\n    const socket = socketRef.current;\n    if (!socket) return;\n    socket.emit(\"editMessage\", {\n      user_room,\n      originalMessage,\n      editedMessageText\n    });\n  }\n\n  // current plaintext flow; we’ll upgrade Input to sealed+PoW next\n  const sendMessage = eventOrPayload => {\n    // supports both old onSubmit(event) and new programmatic calls\n    if (eventOrPayload !== null && eventOrPayload !== void 0 && eventOrPayload.preventDefault) {\n      eventOrPayload.preventDefault();\n    }\n    const socket = socketRef.current;\n    if (!socket) return;\n\n    // legacy plaintext path (kept intact for now)\n    if (typeof message === \"string\" && message.trim().length > 0) {\n      socket.emit(\"sendMessage\", {\n        user_name,\n        user_room,\n        message_text: message.trim()\n      });\n      setMessage(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(InfoBar, {\n        user_room: user_room\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Messages, {\n        messages: messages,\n        current_user_name: user_name,\n        editMessage: editMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        message: message,\n        setMessage: setMessage,\n        sendMessage: sendMessage,\n        room: user_room,\n        roomPubKey: roomPubKey // available for sealed-sender in the next step\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n_s(Chat, \"0edjG4coTSI1g6JotNkbUDfVQFI=\", false, function () {\n  return [useLocation];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useLocation","queryString","io","Messages","InfoBar","Input","jsxDEV","_jsxDEV","Chat","_s","location","socketRef","user_name","set_user_name","user_room","set_user_room","message","setMessage","messages","setMessages","ENDPOINT","process","env","REACT_APP_ENDPOINT","roomPubKey","setRoomPubKey","qName","qRoom","parse","search","String","current","disconnect","socket","transports","withCredentials","emit","off","onMessage","msg","prev","on","onEdited","editedMessage","originalMessage","editedMessageText","map","m","message_id","message_text","url","encodeURIComponent","fetch","then","r","ok","json","Promise","reject","pubkey_b64","catch","editMessage","sendMessage","eventOrPayload","preventDefault","trim","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","current_user_name","room","_c","$RefreshReg$"],"sources":["/home/rubbish/secure_messaging_platform/client/src/components/Chat/Chat.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport queryString from \"query-string\";\nimport io from \"socket.io-client\";\n\nimport Messages from \"../Messages/Messages\";\nimport InfoBar from \"../InfoBar/InfoBar\";\nimport Input from \"../Input/Input\";\n\nimport \"./Chat.css\";\n\nfunction Chat() {\n  const location = useLocation();\n  const socketRef = useRef(null);\n\n  const [user_name, set_user_name] = useState(\"\");\n  const [user_room, set_user_room] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n\n  // use an explicit URL with protocol to avoid env/WS quirks\n  const ENDPOINT = process.env.REACT_APP_ENDPOINT || \"http://localhost:5001\";\n\n  // (future sealed-sender) room public key, fetched from server\n  const [roomPubKey, setRoomPubKey] = useState(null); // Uint8Array or base64 string as you prefer\n\n  // connect & join once per room change\n  useEffect(() => {\n    const { user_name: qName, user_room: qRoom } = queryString.parse(location.search);\n    if (!qName || !qRoom) return;\n\n    set_user_name(String(qName));\n    set_user_room(String(qRoom));\n\n    // establish a fresh socket (and clean up old one if present)\n    if (socketRef.current) {\n      try { socketRef.current.disconnect(); } catch {}\n    }\n    const socket = io(ENDPOINT, {\n      transports: [\"websocket\", \"polling\"],\n      withCredentials: true,\n    });\n    socketRef.current = socket;\n\n    socket.emit(\"join\", { user_name: String(qName), user_room: String(qRoom) });\n\n    return () => {\n      if (socketRef.current) {\n        socketRef.current.off();\n        socketRef.current.disconnect();\n        socketRef.current = null;\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [location.search]);\n\n  // message stream\n  useEffect(() => {\n    const socket = socketRef.current;\n    if (!socket) return;\n\n    const onMessage = (msg) => {\n      // keeps compatibility with your current message shape\n      setMessages((prev) => [...prev, msg]);\n    };\n\n    socket.on(\"message\", onMessage);\n    return () => {\n      socket.off(\"message\", onMessage);\n    };\n  }, [socketRef]);\n\n  // edited message stream\n  useEffect(() => {\n    const socket = socketRef.current;\n    if (!socket) return;\n\n    const onEdited = (editedMessage) => {\n      const { originalMessage, editedMessageText } = editedMessage;\n      setMessages((prev) =>\n        prev.map((m) =>\n          m.message_id === originalMessage.message_id\n            ? { ...m, message_text: editedMessageText }\n            : m\n        )\n      );\n    };\n\n    socket.on(\"editedMessage\", onEdited);\n    return () => {\n      socket.off(\"editedMessage\", onEdited);\n    };\n  }, [socketRef]);\n\n  // fetch room public key for sealed-sender (kept optional; plaintext still works)\n  useEffect(() => {\n    if (!user_room) return;\n    const url = `${ENDPOINT}/roomPubKey?room=${encodeURIComponent(user_room)}`;\n    fetch(url)\n      .then((r) => (r.ok ? r.json() : Promise.reject()))\n      .then(({ pubkey_b64 }) => setRoomPubKey(pubkey_b64 || null))\n      .catch(() => {\n        // if your backend doesn’t expose this yet, we simply skip it\n        setRoomPubKey(null);\n      });\n  }, [user_room, ENDPOINT]);\n\n  function editMessage(originalMessage, editedMessageText) {\n    const socket = socketRef.current;\n    if (!socket) return;\n    socket.emit(\"editMessage\", {\n      user_room,\n      originalMessage,\n      editedMessageText,\n    });\n  }\n\n  // current plaintext flow; we’ll upgrade Input to sealed+PoW next\n  const sendMessage = (eventOrPayload) => {\n    // supports both old onSubmit(event) and new programmatic calls\n    if (eventOrPayload?.preventDefault) {\n      eventOrPayload.preventDefault();\n    }\n    const socket = socketRef.current;\n    if (!socket) return;\n\n    // legacy plaintext path (kept intact for now)\n    if (typeof message === \"string\" && message.trim().length > 0) {\n      socket.emit(\"sendMessage\", {\n        user_name,\n        user_room,\n        message_text: message.trim(),\n      });\n      setMessage(\"\");\n    }\n  };\n\n  return (\n    <div className=\"outerContainer\">\n      <div className=\"container\">\n        <InfoBar user_room={user_room} />\n        <Messages\n          messages={messages}\n          current_user_name={user_name}\n          editMessage={editMessage}\n        />\n        <Input\n          message={message}\n          setMessage={setMessage}\n          sendMessage={sendMessage}\n          room={user_room}\n          roomPubKey={roomPubKey} // available for sealed-sender in the next step\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Chat;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}